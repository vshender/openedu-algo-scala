/* Знакомство с жителями Сортлэнда
 *
 * Владелец графства Сортлэнд, граф Бабблсортер, решил познакомиться со своими
 * подданными.  Число жителей в графстве нечетно и составляет n, где n
 * может быть достаточно велико, поэтому граф решил ограничиться знакомством с
 * тремя представителями народонаселения: с самым бедным жителем, с жителем,
 * обладающим средним достатком, и с самым богатым жителем.
 *
 * Согласно традициям Сортлэнда, считается, что житель обладает средним
 * достатком, если при сортировке жителей по сумме денежных сбережений он
 * оказывается ровно посередине.  Известно, что каждый житель графства имеет
 * уникальный идентификационный номер, значение которого расположено в границах
 * от единицы до n.  Информация о размере денежных накоплений жителей хранится
 * в массиве M таким образом, что сумма денежных накоплений жителя, обладающего
 * идентификационным номером i, содержится в ячейке M[i].  Помогите секретарю
 * графа мистеру Свопу вычислить идентификационные номера жителей, которые
 * будут приглашены на встречу с графом.
 *
 * Формат входного файла:
 *
 * Первая строка входного файла содержит число жителей n (3 <= n <= 9999, n
 * нечетно).  Вторая строка содержит описание массива M, состоящее из n
 * положительных вещественных чисел, разделенных пробелами.  Гарантируется, что
 * все элементы массива различны, а их значения имеют точность не более двух
 * знаков после запятой и не превышают 10^6.
 *
 * Формат выходного файла:
 *
 * В выходной файл выведите три целых положительных числа, разделенных
 * пробелами -- идентификационные номера беднейшего, среднего и самого богатого
 * жителей Сортлэнда.
 *
 * Пример:
 *
 * input.txt
 *   5
 *   10.00 8.70 0.01 5.00 3.00
 * output.txt
 *   3 4 1
 *
 * Комментарий к примеру:
 *
 * Если отсортировать жителей по их достатку, получится следующий массив:
 *   [0.01, 3] [3.00, 5] [5.00, 4] [8.70, 2] [10.00, 1]
 *
 * Здесь каждый житель указан в квадратных скобках, первое число -- его
 * достаток, второе число -- его идентификационный номер. Таким образом, самый
 * бедный житель имеет номер 3, самый богатый -- номер 1, а средний -- номер 4.
 */

import java.io.{FileReader, FileWriter, PrintWriter}
import java.util.Scanner
import scala.util.{Using, Sorting}

case class Resident(id: Int, savings: Float) extends Ordered[Resident] {
  def compare(that: Resident): Int = this.savings compare that.savings
}

object SortLand {
  def main(args: Array[String]): Unit = {
    val population = Using.resource(new Scanner(new FileReader("input.txt"))) { in =>
      val n = in.nextInt()
      Array.tabulate[Resident](n)((i: Int) => Resident(i + 1, in.nextFloat()))
    }

    Sorting.quickSort(population)

    Using.resource(new PrintWriter(new FileWriter("output.txt"))) { out =>
      out.printf("%d %d %d\n",
        population(0).id,
        population(population.length / 2).id,
        population(population.length - 1).id,
      )
    }
  }
}
